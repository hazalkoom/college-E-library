[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "staff_member_required",
        "importPath": "django.contrib.admin.views.decorators",
        "description": "django.contrib.admin.views.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.admin.views.decorators",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "cel.asgi",
        "description": "cel.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "cel.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-yy3v-2z!m30r#t=x8_8lz=b1iwpyzpq3*hb0uojo16_hw*+x@@'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-yy3v-2z!m30r#t=x8_8lz=b1iwpyzpq3*hb0uojo16_hw*+x@@'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'website'",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'website'\n]\nMIDDLEWARE = [",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'cel.urls'",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "ROOT_URLCONF = 'cel.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "WSGI_APPLICATION = 'cel.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# media files",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# media files\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# media files\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\nLOGIN_REDIRECT_URL = 'home'  # Redirects to home page after login\nLOGOUT_REDIRECT_URL = 'login'  # Redirects to home page after logout",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'static')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# media files\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\nLOGIN_REDIRECT_URL = 'home'  # Redirects to home page after login\nLOGOUT_REDIRECT_URL = 'login'  # Redirects to home page after logout",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# media files\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\nLOGIN_REDIRECT_URL = 'home'  # Redirects to home page after login\nLOGOUT_REDIRECT_URL = 'login'  # Redirects to home page after logout",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\nLOGIN_REDIRECT_URL = 'home'  # Redirects to home page after login\nLOGOUT_REDIRECT_URL = 'login'  # Redirects to home page after logout",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nLOGIN_REDIRECT_URL = 'home'  # Redirects to home page after login\nLOGOUT_REDIRECT_URL = 'login'  # Redirects to home page after logout",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = 'home'  # Redirects to home page after login\nLOGOUT_REDIRECT_URL = 'login'  # Redirects to home page after logout",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "cel.settings",
        "description": "cel.settings",
        "peekOfCode": "LOGOUT_REDIRECT_URL = 'login'  # Redirects to home page after logout",
        "detail": "cel.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "cel.urls",
        "description": "cel.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('website.urls')),\n]\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "cel.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "cel.wsgi",
        "description": "cel.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "cel.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "website.migrations.0001_initial",
        "description": "website.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Books',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=100)),",
        "detail": "website.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "dict_get",
        "kind": 2,
        "importPath": "website.templatetags.custom_filters",
        "description": "website.templatetags.custom_filters",
        "peekOfCode": "def dict_get(dictionary, key):\n    \"\"\"Safely get a value from a dictionary.\"\"\"\n    return dictionary.get(key)\n@register.filter\ndef add_class(value, class_name):\n    return value.as_widget(attrs={'class': class_name})",
        "detail": "website.templatetags.custom_filters",
        "documentation": {}
    },
    {
        "label": "add_class",
        "kind": 2,
        "importPath": "website.templatetags.custom_filters",
        "description": "website.templatetags.custom_filters",
        "peekOfCode": "def add_class(value, class_name):\n    return value.as_widget(attrs={'class': class_name})",
        "detail": "website.templatetags.custom_filters",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "website.templatetags.custom_filters",
        "description": "website.templatetags.custom_filters",
        "peekOfCode": "register = template.Library()\n@register.filter\ndef dict_get(dictionary, key):\n    \"\"\"Safely get a value from a dictionary.\"\"\"\n    return dictionary.get(key)\n@register.filter\ndef add_class(value, class_name):\n    return value.as_widget(attrs={'class': class_name})",
        "detail": "website.templatetags.custom_filters",
        "documentation": {}
    },
    {
        "label": "WebsiteConfig",
        "kind": 6,
        "importPath": "website.apps",
        "description": "website.apps",
        "peekOfCode": "class WebsiteConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'website'",
        "detail": "website.apps",
        "documentation": {}
    },
    {
        "label": "BookUploadForm",
        "kind": 6,
        "importPath": "website.forms",
        "description": "website.forms",
        "peekOfCode": "class BookUploadForm(forms.ModelForm):\n    class Meta:\n        model = Books\n        fields = ['title', 'description', 'file']\n        widgets = {\n            'title': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Book Title'}),\n            'description': forms.Textarea(attrs={'class': 'form-control', 'placeholder': 'Description'}),\n            'file': forms.ClearableFileInput(attrs={'class': 'form-control-file'}),\n        }\nclass LectureUploadForm(forms.ModelForm):",
        "detail": "website.forms",
        "documentation": {}
    },
    {
        "label": "LectureUploadForm",
        "kind": 6,
        "importPath": "website.forms",
        "description": "website.forms",
        "peekOfCode": "class LectureUploadForm(forms.ModelForm):\n    class Meta:\n        model = Lectures\n        fields = ['title', 'description', 'file', 'subject']\n        widgets = {\n            'title': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Lecture Title'}),\n            'description': forms.Textarea(attrs={'class': 'form-control', 'placeholder': 'Lecture Description'}),\n            'file': forms.ClearableFileInput(attrs={'class': 'form-control-file'}),\n            'subject': forms.Select(attrs={'class': 'form-control'}),\n        }",
        "detail": "website.forms",
        "documentation": {}
    },
    {
        "label": "Books",
        "kind": 6,
        "importPath": "website.models",
        "description": "website.models",
        "peekOfCode": "class Books(models.Model):\n    title = models.CharField(max_length=100)\n    description = models.TextField(max_length=300, blank=True, null=True)\n    file = models.FileField(upload_to='books/')\n    def __str__(self):\n        return self.title\nclass Subject(models.Model):\n    title = models.CharField(max_length=100, unique=True)\n    def __str__(self):\n        return self.title ",
        "detail": "website.models",
        "documentation": {}
    },
    {
        "label": "Subject",
        "kind": 6,
        "importPath": "website.models",
        "description": "website.models",
        "peekOfCode": "class Subject(models.Model):\n    title = models.CharField(max_length=100, unique=True)\n    def __str__(self):\n        return self.title \nclass Lectures(models.Model):\n    title = models.CharField(max_length=100)\n    description = models.TextField(max_length=300, blank=True, null=True)\n    file = models.FileField(upload_to='lectures/')\n    subject = models.ForeignKey(Subject, on_delete=models.CASCADE, related_name='lectures')\n    def __str__(self):",
        "detail": "website.models",
        "documentation": {}
    },
    {
        "label": "Lectures",
        "kind": 6,
        "importPath": "website.models",
        "description": "website.models",
        "peekOfCode": "class Lectures(models.Model):\n    title = models.CharField(max_length=100)\n    description = models.TextField(max_length=300, blank=True, null=True)\n    file = models.FileField(upload_to='lectures/')\n    subject = models.ForeignKey(Subject, on_delete=models.CASCADE, related_name='lectures')\n    def __str__(self):\n        return self.title",
        "detail": "website.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "website.urls",
        "description": "website.urls",
        "peekOfCode": "urlpatterns = [\n    # pages for all users\n    path('', views.login, name='login'),\n    path('home', views.home, name='home'),\n    path('books/', views.books, name='books'),\n    path('lectures/', views.lectures, name='lectures'),  # No subject_id\n    path('lectures/<int:subject_id>/', views.lectures, name='lectures'),\n    # pages for admins\n    path('upload/', views.upload_page, name='upload'),\n    path('logout/', views.logout_view, name='logout'),  # This is the logout URL",
        "detail": "website.urls",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def login(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            auth_login(request, user)\n            return redirect('home')  # Redirect to the home page after login\n    else:\n        form = AuthenticationForm()\n    return render(request, 'login.html', {'form': form})",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def logout_view(request):\n    logout(request)  # This logs out the user\n    return redirect('login')  # Redirect to the login page after logout\ndef home(request):\n    if request.method == \"POST\":\n        return render(request, 'home.html', {'message': 'POST Request'})\n    return render(request, 'home.html')  # Default response for GET requests\n# View for displaying all books\ndef books(request):\n    booksl = Books.objects.all()",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def home(request):\n    if request.method == \"POST\":\n        return render(request, 'home.html', {'message': 'POST Request'})\n    return render(request, 'home.html')  # Default response for GET requests\n# View for displaying all books\ndef books(request):\n    booksl = Books.objects.all()\n    return render(request, 'books.html', {'books':booksl})\ndef lectures(request):\n    subjects = Subject.objects.all()  # All subjects",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "books",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def books(request):\n    booksl = Books.objects.all()\n    return render(request, 'books.html', {'books':booksl})\ndef lectures(request):\n    subjects = Subject.objects.all()  # All subjects\n    lectures_by_subject = {\n        subject.id: Lectures.objects.filter(subject=subject) for subject in subjects\n    }\n    return render(request, 'lectures.html', {\n        'subjects': subjects,",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "lectures",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def lectures(request):\n    subjects = Subject.objects.all()  # All subjects\n    lectures_by_subject = {\n        subject.id: Lectures.objects.filter(subject=subject) for subject in subjects\n    }\n    return render(request, 'lectures.html', {\n        'subjects': subjects,\n        'lectures': lectures_by_subject\n    })\n@staff_member_required    ",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "upload_page",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def upload_page(request):\n    # Instantiate forms\n    book_form = BookUploadForm()\n    lecture_form = LectureUploadForm()\n    if request.method == 'POST':\n        if 'book_submit' in request.POST:  # Check if the book form is submitted\n            book_form = BookUploadForm(request.POST, request.FILES)\n            if book_form.is_valid():\n                book_form.save()\n                print(\"Book uploaded successfully\")  # Debug message",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "delete_item",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def delete_item(request, item_type, item_id):\n    if item_type == 'book':\n        item = get_object_or_404(Books, id=item_id)\n        redirect_url = 'books'\n    elif item_type == 'lecture':\n        item = get_object_or_404(Lectures, id=item_id)\n        redirect_url = 'lectures'\n    else:\n        raise ValueError(\"Invalid item type\")\n    item.delete()",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "edit_item",
        "kind": 2,
        "importPath": "website.views",
        "description": "website.views",
        "peekOfCode": "def edit_item(request, item_type, item_id):\n    if item_type == 'book':\n        item = get_object_or_404(Books, id=item_id)\n        form_class = BookUploadForm\n        redirect_url = 'books'\n    elif item_type == 'lecture':\n        item = get_object_or_404(Lectures, id=item_id)\n        form_class = LectureUploadForm\n        redirect_url = 'lectures'\n    else:",
        "detail": "website.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cel.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]